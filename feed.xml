<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://sebinxavi.github.io/</id><title>Sebin Xavi</title><subtitle>Cloud, DevOps, Site Reliability Engineer</subtitle> <updated>2022-02-23T12:52:19+05:30</updated> <author> <name>Sebin Xavi</name> <uri>https://sebinxavi.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://sebinxavi.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://sebinxavi.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 Sebin Xavi </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>AWS EC2 SSH Key Rotation with Ansible</title><link href="https://sebinxavi.github.io/posts/AWS-EC2-SSH-Key-Rotation/" rel="alternate" type="text/html" title="AWS EC2 SSH Key Rotation with Ansible" /><published>2022-02-12T08:30:00+05:30</published> <updated>2022-02-22T12:08:55+05:30</updated> <id>https://sebinxavi.github.io/posts/AWS-EC2-SSH-Key-Rotation/</id> <content src="https://sebinxavi.github.io/posts/AWS-EC2-SSH-Key-Rotation/" /> <author> <name>Sebin Xavi</name> </author> <category term="AWS" /> <summary> Sometimes we get the requirement to change the key-pair of AWS EC2 instances for some security reasons. In this article, we will be changing the key pair of running EC2 instances using Ansible Playbook. General Information When you use standard AMIs to launch an EC2 instance, you can connect to it using remote access protocols like SSH and RDP. AWS provides asymmetric key pairs called Amazon ... </summary> </entry> <entry><title>EKS cluster deployment using Terraform</title><link href="https://sebinxavi.github.io/posts/EKS-cluster-deployment-using-Terraform/" rel="alternate" type="text/html" title="EKS cluster deployment using Terraform" /><published>2021-08-11T08:30:00+05:30</published> <updated>2022-02-22T12:16:20+05:30</updated> <id>https://sebinxavi.github.io/posts/EKS-cluster-deployment-using-Terraform/</id> <content src="https://sebinxavi.github.io/posts/EKS-cluster-deployment-using-Terraform/" /> <author> <name>Sebin Xavi</name> </author> <category term="AWS" /> <summary> In this blog, I will be going to create an AWS EKS cluster with the help of Terraform scripts. Amazon Elastic Kubernetes Service (Amazon EKS) is a managed Kubernetes service provided by AWS. Terraform is a tool to manage your infrastructure as code so rather than provisioning an EKS cluster manually, you can use terraform to provision them for you. Step 1: Set up Terraform with AWS The first ... </summary> </entry> <entry><title>Kubernetes Liveness and Readiness Probes</title><link href="https://sebinxavi.github.io/posts/Kubernetes-Liveness-and-Readiness-Probes/" rel="alternate" type="text/html" title="Kubernetes Liveness and Readiness Probes" /><published>2021-04-19T08:30:00+05:30</published> <updated>2022-02-22T21:51:23+05:30</updated> <id>https://sebinxavi.github.io/posts/Kubernetes-Liveness-and-Readiness-Probes/</id> <content src="https://sebinxavi.github.io/posts/Kubernetes-Liveness-and-Readiness-Probes/" /> <author> <name>Sebin Xavi</name> </author> <category term="AWS" /> <summary> Liveness and Readiness probes are used to control the health of an application running inside a Pod’s container. Kubernetes gives you two types of health checks, and it is important to understand the differences between the two, and their uses. Liveness probe Liveness probes let Kubernetes know if your app is alive or dead. If your app is alive, then Kubernetes leaves it alone. If your app is ... </summary> </entry> </feed>
